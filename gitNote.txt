--------------------------------------------------------------------------------------------------
初次提交的命令
$ git init
$ git add README.md
$ git commit -m "first commit"
$ git remote add origin git@github.com:xxxx.git
$ git push -u origin main
或
$ git push -u origin master

--------------------------------------------------------------------------------------------------
后续使用，多台机器共享仓库的操作流程

切记，先pull：
$ git pull origin main

1）查看工作区的修改的文件
	$ git status
2）比较现在工作区（未提交到暂存区）与 暂存区（已经通过 git add 和 git commit 提交了）的具体的修改变化。
	$ git diff 

# 运行完毕，git 会告诉我们：删除了红色行 ，新增了 绿色 行的代码
# git diff 的扩展命令
	$ git diff：是查看 workspace（工作区） 与 index（暂存区） 的差别的。 
	$ git diff --cached：是查看 index（暂存区） 与 local repositorty（本地仓库） 的差别的。 
	$ git diff HEAD：是查看 workspace 和 local repository 的差别的。（HEAD 指向的是 local repository 中最新提交的版本）

注：git diff 后跟两个参数，如果只写一个参数，表示默认跟 workspace中的代码作比较。git diff 显示的结果为 第二个参数所指的代码在第一个参数所指代码基础上的修改。如，git diff HEAD 表示 workspace 在 最新commit的基础上所做的修改

3）正常更新仓库
$ git pull origin main
$ git add .
$ git commit -m “everything”	#在commit 之前，想看看暂存区有哪些文件：git ls-files
$ git push origin main
其中第一个命令只有在有别人更新了你的远程仓库的情况下才需要，一般情况下并不需要执行。

--------------------------------------------------------------------------------------------------
【问题】
git push时发现有超过100M的文件时，删除文件后，发现还是提交不上去的问题
【解决】
git log,找到上次提交的前面一次提交ID
执行git reset --soft commit id
再进行$ git pull合并一下版本
执行$ git rm -f 大文件
再就是$ git add,git commit,git push等操作
--------------------------------------------------------------------------------------------------
【问题】：
提交文件不能大于100M
【解决】：
用这个代码找到100m以上的文件：$ find ./ -size +100M
可以尝试使用大文件支持库：https://git-lfs.github.com
1）安装git - lfs到本机
根据官网安装，之后就是提交大文件的顺序，下面是官网的顺序：
2）安装Git命令行扩展。只需要设置一次Git LFS。在项目目录下，执行以下命令：
$ git lfs install
3）选择希望Git LFS管理的文件类型（或直接编辑.gitattributes）。
可以随时配置其他文件扩展名。这一步成功后会生成一个gitattributes文件
$ git lfs track “* .a” --这里的 “ *.a "就是你要上传的大文件的路径
4）添加并commit gitattributes文件
先reset 到你刚才commit的前一个commit,(意思就是撤销刚才的commit，回到起点再来一次。)
先将 .gitattributes文件，单独commit，然后push
$ git add .gitattributes
5）然后再添加大文件到本地缓存区
$ git add demo.a
$ git lfs ls-files
$ git commit -m "提交.a大文件"
$ git push
【参考】：https://www.jianshu.com/p/7d8003ba2324
--------------------------------------------------------------------------------------------------
【问题】：
push过程中断网，之后继续push，提示冲突：
! [rejected]        main -> main (fetch first) error: failed to push some refs to 'github.com:xxxx’
【解决】：
	$ git pull --rebase origin main
	$ git push origin main

原理：$ git pull -–rebase origin master 操作，意为先取消commit记录，并且把它们临时保存为补丁(patch)(这些补丁在”.git/rebase”目录中)，之后同步远程库到本地，最后合并补丁到本地库之中。
注意：距离上次push提交至今，在本地库commit的记录均暂存为patch。
--------------------------------------------------------------------------------------------------
【问题】：
Your branch is ahead of 'origin/main' by 2 commits.
  (use "git push" to publish your local commits)

nothing to commit, working tree clean
意思是本地仓库有一个提交，比远程仓库要先进一个commit.
需要先把这个commit提交到远程仓库
【解决】：
$ git push origin main
正常的话可以看到以下进度：
Enumerating objects: 1128, done.
Counting objects: 100% (1128/1128), done.
Delta compression using up to 8 threads
Compressing objects:  65% (717/1102)
完成后，提交：
$ git commit -m "test"
On branch main
Your branch is up to date with 'origin/main'.
--------------------------------------------------------------------------------------------------
【问题】：
git 报错does not have a commit checked out
【解决】：
错误描述：在使用git提交的时候出现The file will have its original line endings in your working directory.错误，后来发现 自己再提交的时候忘记输入git add 上传的文件 出现了上面的错误，需要下面进行修改：
	$ git rm -r -f --cached ./   (删除缓存)
	$ git add . （添加该目录下所有文件）
	$ git push -u origin master  （这时候提交就没问题了）
--------------------------------------------------------------------------------------------------
【问题】：
提示 Untracked files:
【解决】：
跟踪新文件，使用命令 git add 开始跟踪一个文件。 所以，要跟踪 README 文件，运行：
	$ git add README
--------------------------------------------------------------------------------------------------
【问题】：
在默认设置下，中文文件名在工作区状态输出，中文名不能正确显示，而是显示为八进制的字符编码。
【解决】：
将git配置文件 core.quotepath项设置为false。quotepath表示引用路径，加上--global表示全局配置
	git bash终端输入命令：
	$ git config --global core.quotepath false
--------------------------------------------------------------------------------------------------
# 验证gitHub是否链接
$ ssh -T git@github.com
如果提示 ：Hi xxx, You've successfully authenticated, but GitHub does not provide shell access
通过以下命令行添加远程仓库：$ git remote set-url origin git@github.com:rosabai666/soundec.git
# 初始使用参考
# 查看目录
$ ls -al ~/.ssh
或者，键盘 shift+command+G，输入：～/.ssh
# 打开id_rsa.pub文件
$ cat ~/.ssh/id_rsa.pub

--------------------------------------------------------------------------------------------------
1.查看当前仓库地址 
	$ git remote show origin 
如果没有的话,你必须先增加一个远程url   
	$ git remote add origin "xxx.git" 

2.修改仓库地址 
	$ git remote set-url origin git@192.168.30.29:chenwei/em-data.com.cn.git 

--------------------------------------------------------------------------------------------------
如果使用 $ git commit <fileName> 命令：
会进入vim控制台，需要：
1） shift+; 进入编辑状态
2）随便输入，作为commit信息
3）按 esc，退出编辑
4）连续按两次 ZZ，退出vim，回到控制台
--------------------------------------------------------------------------------------------------
【问题】：git 向仓库推送代码失败
You've successfully authenticated, but GitHub does not provide shell access.
【解决】：
重新生成 ssh key 将之前 GitHub 保存的秘钥删除(也可以直接添加新的,不用管之前的). 生成 ssh key 命令
	$ ssh-keygen -t rsa -C “your_email.com”

【问题2】：git 向仓库推送代码失败
使用：$ git push origin master 向仓库推送，提示以下错误
error: src refspec master does not match any
error: failed to push some refs to 'github.com:rosabai666/soundec.git'
【解决】：
github更新了，现在github的默认分支为main；在提交时，需要提交到main，而不是master
使用：$ git push origin main，即可。

【问题3】：git 向仓库推送代码失败
使用：$ git push origin main 向仓库推送，提示以下错误
! [rejected]        main -> main (fetch first) 
error: failed to push some refs to 'github.com:xxx'
【解决】：需要先把远程仓库和本地的同步下，再提交
	$ git pull origin main
【解决2】：如果以上不生效
先把git的东西fetch到你本地然后merge后再push
	$ git fetch origin master
	$ git merge origin FETCH_HEAD 
这2句命令等价于$ git pull origin master但是使用git fetch + git merge 更加安全。
--------------------------------------------------------------------------------------------------
【问题】
error: Your local changes to the following files would be overwritten by merge
出现的原因是git merge时本地分支的更改没有保存下来。

实测完整问题流程：
1）win10在pull时，因为有个文件名称包含了*（mac支持*在文件名中），pull报错：error: unable to create file ：Invalid argument
2）Mac上修改*为x，同时重新push（github上已看到提交修改成功）
3）win10再次pull，pull报错：error: Your local changes to the following files would be overwritten by merge

【解决】：
方法一，丢弃本地改动
如果本地的修改不重要，那么可以直接把本地的的修改丢弃：
# 丢弃所有本地未提交的修改
$ git checkout .

有的本地文件是新添加但没有add过的，在git status中的状态是untrack，它们需要通过git clean删除：
# 首先查看一下有哪些文件将被删除
$ git clean -nxdf
# 确定将被删除的文件无误后，执行删除
$ git clean -xdf
# 也可以一个一个文件的删除，比如删除文件xxx
$ git clean -f xxx
注意：丢弃本地文件是危险操作，必须考虑无误后再删除。

之后再Pull，问题解决
--------------------------------------------------------------------------------------------------

