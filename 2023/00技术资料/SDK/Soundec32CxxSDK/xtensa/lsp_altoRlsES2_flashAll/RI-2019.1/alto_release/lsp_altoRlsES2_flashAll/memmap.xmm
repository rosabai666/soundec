//  Memory map file to generate linker scripts for programs without board I/O.

// Customer ID=15270; Build=0x8554f; Copyright (c) 2004-2015 Cadence Design Systems, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.



ROMING=true

// A memory map is a sequence of memory descriptions and
// optional parameter assignments.
//
// Each memory description has the following format:
//   BEGIN <name>
//     <addr> [,<paddr>] : <mem-type> : <mem-name> : <size> [,<psize>]
//                       : [writable] [,executable] [,device] ;
//     <segment>*
//   END <name>
//
// where each <segment> description has the following format:
//     <seg-name> : F|C : <start-addr> - <end-addr> [ : STACK ] [ : HEAP ]
//                : <section-name>* ;
//
// Each parameter assignment is a keyword/value pair in the following format:
//   <keyword> = <value>                (no spaces in <value>)
// or
//   <keyword> = "<value>"              (spaces allowed in <value>)
//
// The following primitives are also defined:
//   PLACE SECTIONS( <section-name>* ) { WITH_SECTION(<section-name>)
//                                       | IN_SEGMENT(<seg-name>) }
//
//   NOLOAD <section-name1> [ <section-name2> ... ]
//
// Please refer to the Xtensa LSP Reference Manual for more details.
//

// Additions for -mvecreset option:
VECRESET=0xa0000000


// Additions for -mvecselect option:
VECSELECT=0x1


// Additions for -mlocalmems option:
PLACE SECTIONS(.bss) WITH_SECTION(.dram0.bss)
PLACE SECTIONS(.data) WITH_SECTION(.dram0.data)
PLACE SECTIONS(.rodata) WITH_SECTION(.dram0.rodata)
PLACE SECTIONS(STACK) WITH_SECTION(.dram0.bss)
PLACE SECTIONS(HEAP) WITH_SECTION(.dram0.bss)
PLACE SECTIONS(.literal) WITH_SECTION(.iram0.literal)
PLACE SECTIONS(.text) WITH_SECTION(.iram0.text)


// Additions for -mrompack option:
ROMING=1

BEGIN srom
0x90000000: sysrom : srom : 0x10000 : executable ;
 srom0 : C : 0x90000000 - 0x9000ffff : .srom.rodata .srom.literal .srom.text;
END srom

BEGIN dram0
0x9ff40000: dataRam : dram0 : 0x40000 : writable ;
 dram0_0 : C : 0x9ff40000 - 0x9ff7ffff :  STACK :  HEAP : .sram.rodata .sram.data __llvm_prf_names .dram0.rodata .clib.rodata .rtos.rodata .rodata .clib.data .clib.percpu.data .rtos.percpu.data .rtos.data .dram0.data .data .clib.bss .clib.percpu.bss .rtos.percpu.bss .rtos.bss .dram0.bss .sram.bss .bss;
END dram0

BEGIN iram0
0x9ffc0000: instRam : iram0 : 0x40000 : executable, writable ;
 iram0_0 : F : 0x9ffc0000 - 0x9ffc017b : .WindowVectors.text .Level2InterruptVector.literal;
 iram0_1 : F : 0x9ffc017c - 0x9ffc019f : .Level2InterruptVector.text .Level3InterruptVector.literal;
 iram0_2 : F : 0x9ffc01a0 - 0x9ffc01df : .Level3InterruptVector.text .Level4InterruptVector.literal;
 iram0_3 : F : 0x9ffc01e0 - 0x9ffc021f : .Level4InterruptVector.text .DebugExceptionVector.literal;
 iram0_4 : F : 0x9ffc0220 - 0x9ffc025b : .DebugExceptionVector.text .KernelExceptionVector.literal;
 iram0_5 : F : 0x9ffc025c - 0x9ffc027b : .KernelExceptionVector.text .UserExceptionVector.literal;
 iram0_6 : F : 0x9ffc027c - 0x9ffc029b : .UserExceptionVector.text .DoubleExceptionVector.literal;
 iram0_7 : F : 0x9ffc029c - 0x9fffffff : .DoubleExceptionVector.text .iram0.literal .literal .rtos.literal .clib.literal .iram0.text .text .clib.text .rtos.text .sram.literal .sram.text;
END iram0

BEGIN sram
0xa0000000: sysram : sram : 0x100000 : executable, writable ;
 sram0 : F : 0xa0000000 - 0xa0000fff : .ResetVector.text .ResetHandler.literal;
 sram1 : F : 0xa0001000 - 0xa00fffff : .ResetHandler.text .rom.store;
END sram